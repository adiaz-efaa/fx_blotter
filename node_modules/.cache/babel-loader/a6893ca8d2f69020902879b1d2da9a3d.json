{"ast":null,"code":"import _objectSpread from \"/Users/alvarodiazvalenzuela/Documents/DesafioLatam/fx_blotter/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { objectExpression } from \"@babel/types\";\nconst initialState = {\n  fecha: '1969-01-12',\n  bid: 700.00,\n  ask: 700.30,\n  ops: {\n    1: {\n      numop: 1,\n      cliente: 'Santander',\n      fxrate: 'USDCLP',\n      cv: 'Compra',\n      monto: 1000000,\n      precio: 700,\n      editable: false\n    },\n    2: {\n      numop: 2,\n      cliente: 'Estado',\n      fxrate: 'USDCLP',\n      cv: 'Venta',\n      monto: 3000000,\n      precio: 701,\n      editable: false\n    },\n    3: {\n      numop: 3,\n      cliente: 'Estado',\n      fxrate: 'USDCLP',\n      cv: 'Venta',\n      monto: 3000000,\n      precio: 702,\n      editable: false\n    },\n    4: {\n      numop: 4,\n      cliente: 'Estado',\n      fxrate: 'USDCLP',\n      cv: 'Compra',\n      monto: 1000000,\n      precio: 701,\n      editable: false\n    }\n  },\n  nextNumop: 5,\n  opsArray: function () {\n    return Object.keys(this.ops).map(key => this.ops[key]);\n  },\n  posicion: -1000000,\n  compras: 2000000,\n  ppcompra: 700,\n  ventas: 6000000,\n  ppventa: 701,\n  resTrading: 1000000,\n  resPos: -1000000\n};\n\nconst sumaCompras = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum + op.monto;\n  } else {\n    return acum;\n  }\n};\n\nconst comprasPonderadas = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum + op.monto * op.precio;\n  } else {\n    return acum;\n  }\n};\n\nconst ventasPonderadas = (acum, op) => {\n  if (op.cv === 'Venta') {\n    return acum + op.monto * op.precio;\n  } else {\n    return acum;\n  }\n};\n\nconst sumaVentas = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum;\n  } else {\n    return acum + op.monto;\n  }\n};\n\nconst update = (state = initialState, action) => {\n  if (action.type === 'PUNTA') {\n    const opsArray = state.opsArray();\n    const compras = opsArray.reduce(sumaCompras, 0);\n    const ventas = opsArray.reduce(sumaVentas, 0);\n    const posicion = compras - ventas;\n    const compPond = opsArray.reduce(comprasPonderadas, 0);\n    const ventPond = opsArray.reduce(ventasPonderadas, 0);\n    const ppcompra = compras > 0 ? compPond / compras : 0;\n    const ppventa = ventas > 0 ? ventPond / ventas : 0;\n    const resTrading = Math.round(Math.min(compras, ventas) * (ppventa - ppcompra));\n    const resPos = Math.round(posicion > 0 ? posicion * (action.bid - ppcompra) : -posicion * (ppventa - action.ask));\n    return _objectSpread({}, state, {\n      bid: action.bid,\n      ask: action.ask,\n      posicion: posicion,\n      compras: compras,\n      ppcompra: ppcompra,\n      ventas: ventas,\n      ppventa: ppventa,\n      resTrading: resTrading,\n      resPos: resPos\n    });\n  }\n\n  if (action.type === 'ELIM_OP') {\n    // eslint-disable-next-line no-restricted-globals\n    const sure = confirm('¿Está seguro de eliminar la operación ' + action.whichOp + '?');\n\n    if (!sure) {\n      return state;\n    }\n\n    const whichOp = parseInt(action.whichOp);\n    const newOpsKeys = Object.keys(state.ops).filter(key => state.ops[key].numop !== whichOp);\n    let newOps = {};\n    let newOpsArray = [];\n\n    for (let key in state.ops) {\n      if (newOpsKeys.includes(key)) {\n        newOps[key] = state.ops[key];\n        newOpsArray.push(state.ops[key]);\n      }\n    }\n\n    const compras = newOpsArray.reduce(sumaCompras, 0);\n    const ventas = newOpsArray.reduce(sumaVentas, 0);\n    const posicion = compras - ventas;\n    const compPond = newOpsArray.reduce(comprasPonderadas, 0);\n    const ventPond = newOpsArray.reduce(ventasPonderadas, 0);\n    const ppcompra = compras > 0 ? compPond / compras : 0;\n    const ppventa = ventas > 0 ? ventPond / ventas : 0;\n    const resTrading = Math.round(Math.min(compras, ventas) * (ppventa - ppcompra));\n    const resPos = Math.round(posicion > 0 ? posicion * (state.bid - ppcompra) : -posicion * (ppventa - state.ask));\n    return _objectSpread({}, state, {\n      ops: newOps,\n      posicion: posicion,\n      compras: compras,\n      ppcompra: ppcompra,\n      ventas: ventas,\n      ppventa: ppventa,\n      resTrading: resTrading,\n      resPos: resPos\n    });\n  }\n\n  if (action.type === 'EDIT_OP') {\n    const whichOp = parseInt(action.whichOp);\n    const modOp = state.ops.filter(() => state.ops.id === whichOp);\n    return _objectSpread({}, state, {\n      ops: [...state.ops]\n    });\n  }\n\n  return state;\n};\n\nexport default update;","map":{"version":3,"sources":["/Users/alvarodiazvalenzuela/Documents/DesafioLatam/fx_blotter/src/redux/reducer.js"],"names":["objectExpression","initialState","fecha","bid","ask","ops","numop","cliente","fxrate","cv","monto","precio","editable","nextNumop","opsArray","Object","keys","map","key","posicion","compras","ppcompra","ventas","ppventa","resTrading","resPos","sumaCompras","acum","op","comprasPonderadas","ventasPonderadas","sumaVentas","update","state","action","type","reduce","compPond","ventPond","Math","round","min","sure","confirm","whichOp","parseInt","newOpsKeys","filter","newOps","newOpsArray","includes","push","modOp","id"],"mappings":"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","sourcesContent":["import {objectExpression} from \"@babel/types\";\n\nconst initialState = {\n  fecha: '1969-01-12',\n  bid: 700.00,\n  ask: 700.30,\n  ops: {\n    1: {numop: 1, cliente: 'Santander', fxrate: 'USDCLP', cv: 'Compra', monto: 1000000, precio: 700, editable: false},\n    2: {numop: 2, cliente: 'Estado', fxrate: 'USDCLP', cv: 'Venta', monto: 3000000, precio: 701, editable: false},\n    3: {numop: 3, cliente: 'Estado', fxrate: 'USDCLP', cv: 'Venta', monto: 3000000, precio: 702, editable: false},\n    4: {numop: 4, cliente: 'Estado', fxrate: 'USDCLP', cv: 'Compra', monto: 1000000, precio: 701, editable: false},\n  },\n  nextNumop: 5,\n  opsArray: function() {\n    return Object.keys(this.ops).map(key => this.ops[key])\n  },\n  posicion: -1000000,\n  compras: 2000000,\n  ppcompra: 700,\n  ventas: 6000000,\n  ppventa: 701,\n  resTrading: 1000000,\n  resPos: -1000000\n}\n\nconst sumaCompras = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum + op.monto\n  } else {\n    return acum\n  }\n}\n\nconst comprasPonderadas = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum + op.monto * op.precio\n  } else {\n    return acum\n  }\n}\n\nconst ventasPonderadas = (acum, op) => {\n  if (op.cv === 'Venta') {\n    return acum + op.monto * op.precio\n  } else {\n    return acum\n  }\n}\n\nconst sumaVentas = (acum, op) => {\n  if (op.cv === 'Compra') {\n    return acum\n  } else {\n    return acum + op.monto\n  }\n}\n\n\nconst update = (state = initialState, action) => {\n  if (action.type === 'PUNTA') {\n    const opsArray = state.opsArray()\n    const compras = opsArray.reduce(sumaCompras, 0)\n    const ventas = opsArray.reduce(sumaVentas, 0)\n    const posicion = compras - ventas\n    const compPond = opsArray.reduce(comprasPonderadas, 0)\n    const ventPond = opsArray.reduce(ventasPonderadas, 0)\n    const ppcompra = compras > 0 ? compPond / compras : 0\n    const ppventa = ventas > 0 ? ventPond / ventas : 0\n    const resTrading = Math.round(Math.min(compras, ventas) * (ppventa - ppcompra))\n    const resPos = Math.round(posicion > 0 ? posicion * (action.bid - ppcompra) : - posicion * (ppventa - action.ask))\n    return {...state, bid: action.bid, ask: action.ask,\n      posicion: posicion,\n      compras: compras, ppcompra: ppcompra,\n      ventas: ventas, ppventa: ppventa,\n      resTrading: resTrading, resPos: resPos}\n  }\n\n  if (action.type === 'ELIM_OP') {\n    // eslint-disable-next-line no-restricted-globals\n    const sure = confirm('¿Está seguro de eliminar la operación ' + action.whichOp + '?')\n    if (!sure) {\n      return state\n    }\n    const whichOp = parseInt(action.whichOp)\n    const newOpsKeys = Object.keys(state.ops).filter(key => state.ops[key].numop !== whichOp)\n    let newOps = {}\n    let newOpsArray = []\n    for (let key in state.ops) {\n      if (newOpsKeys.includes(key)) {\n        newOps[key] = state.ops[key]\n        newOpsArray.push(state.ops[key])\n      }\n    }\n    const compras = newOpsArray.reduce(sumaCompras, 0)\n    const ventas = newOpsArray.reduce(sumaVentas, 0)\n    const posicion = compras - ventas\n    const compPond = newOpsArray.reduce(comprasPonderadas, 0)\n    const ventPond = newOpsArray.reduce(ventasPonderadas, 0)\n    const ppcompra = compras > 0 ? compPond / compras : 0\n    const ppventa = ventas > 0 ? ventPond / ventas : 0\n    const resTrading = Math.round(Math.min(compras, ventas) * (ppventa - ppcompra))\n    const resPos = Math.round(posicion > 0 ? posicion * (state.bid - ppcompra) :\n      - posicion * (ppventa - state.ask))\n    return {...state, ops: newOps, posicion: posicion,\n      compras: compras, ppcompra: ppcompra,\n      ventas: ventas, ppventa: ppventa,\n      resTrading: resTrading, resPos: resPos}\n  }\n\n  if (action.type === 'EDIT_OP') {\n    const whichOp = parseInt(action.whichOp)\n    const modOp = state.ops.filter(() => state.ops.id === whichOp)\n    return {...state, ops: [...state.ops, ]}\n  }\n\n  return state\n}\n\nexport default update"]},"metadata":{},"sourceType":"module"}